{"files":{"/home/runner/work/stryker/stryker/packages/mocha-runner/src/LibWrapper.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":2,"line":16},"start":{"column":5,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":48,"line":15},"start":{"column":25,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":2,"line":27},"start":{"column":5,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3","location":{"end":{"column":52,"line":22},"start":{"column":25,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"4","location":{"end":{"column":19,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"5","location":{"end":{"column":19,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"6","location":{"end":{"column":19,"line":23},"start":{"column":7,"line":23}},"mutatorName":"BooleanLiteral","replacement":"handleFiles","status":"Killed"},{"id":"7","location":{"end":{"column":4,"line":26},"start":{"column":21,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"8","location":{"end":{"column":56,"line":25},"start":{"column":27,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as Mocha from 'mocha';\nimport * as multimatch from 'multimatch';\n\nimport { MochaOptions } from './MochaOptions';\n\nlet loadOptions: undefined | ((argv?: string[] | string) => { [key: string]: any } | undefined);\nlet handleFiles: undefined | ((options: MochaOptions) => string[]);\n\ntry {\n  /*\n   * If read, object containing parsed arguments\n   * @since 6.0.0'\n   * @see https://mochajs.org/api/module-lib_cli_options.html#.loadOptions\n   */\n  loadOptions = require('mocha/lib/cli/options').loadOptions;\n} catch {\n  // Mocha < 6 doesn't support `loadOptions`\n}\n\ntry {\n  // https://github.com/mochajs/mocha/blob/master/lib/cli/run-helpers.js#L132\n  handleFiles = require('mocha/lib/cli/run-helpers').handleFiles;\n  if (!handleFiles) {\n    // Might be moved: https://github.com/mochajs/mocha/commit/15b96afccaf508312445770e3af1c145d90b28c6#diff-39b692a81eb0c9f3614247af744ab4a8\n    handleFiles = require('mocha/lib/cli/collect-files');\n  }\n} catch {\n  // Mocha < 6 doesn't support `handleFiles`\n}\n\n/**\n * Wraps Mocha class and require for testability\n */\nexport default class LibWrapper {\n  public static Mocha = Mocha;\n  public static require = require;\n  public static multimatch = multimatch;\n  public static loadOptions = loadOptions;\n  public static handleFiles = handleFiles;\n}\n"},"/home/runner/work/stryker/stryker/packages/mocha-runner/src/MochaConfigEditor.ts":{"language":"typescript","mutants":[{"id":"9","location":{"end":{"column":41,"line":8},"start":{"column":33,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"10","location":{"end":{"column":4,"line":13},"start":{"column":37,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"}],"source":"import { Config, ConfigEditor } from '@stryker-mutator/api/config';\nimport { tokens } from '@stryker-mutator/api/plugin';\n\nimport MochaOptionsLoader from './MochaOptionsLoader';\nimport { mochaOptionsKey } from './utils.js';\n\nexport default class MochaConfigEditor implements ConfigEditor {\n  public static inject = tokens('loader');\n  constructor(private readonly loader: MochaOptionsLoader) {}\n\n  public edit(config: Config): void {\n    config[mochaOptionsKey] = this.loader.load(config);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/mocha-runner/src/MochaOptionsLoader.ts":{"language":"typescript","mutants":[{"id":"11","location":{"end":{"column":2,"line":24},"start":{"column":52,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"12","location":{"end":{"column":20,"line":17},"start":{"column":14,"line":17}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"13","location":{"end":{"column":19,"line":17},"start":{"column":15,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"14","location":{"end":{"column":11,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"15","location":{"end":{"column":13,"line":19},"start":{"column":11,"line":19}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"16","location":{"end":{"column":28,"line":20},"start":{"column":9,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"17","location":{"end":{"column":17,"line":21},"start":{"column":9,"line":21}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"18","location":{"end":{"column":16,"line":21},"start":{"column":10,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"19","location":{"end":{"column":12,"line":23},"start":{"column":7,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"20","location":{"end":{"column":4,"line":33},"start":{"column":61,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"21","location":{"end":{"column":64,"line":31},"start":{"column":26,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"22","location":{"end":{"column":97,"line":32},"start":{"column":12,"line":32}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"23","location":{"end":{"column":4,"line":44},"start":{"column":53,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"24","location":{"end":{"column":31,"line":36},"start":{"column":9,"line":36}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"25","location":{"end":{"column":31,"line":36},"start":{"column":9,"line":36}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"26","location":{"end":{"column":6,"line":39},"start":{"column":33,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"27","location":{"end":{"column":85,"line":37},"start":{"column":22,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"28","location":{"end":{"column":6,"line":43},"start":{"column":12,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"29","location":{"end":{"column":98,"line":40},"start":{"column":21,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"30","location":{"end":{"column":85,"line":41},"start":{"column":22,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"31","location":{"end":{"column":4,"line":58},"start":{"column":54,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"32","location":{"end":{"column":63,"line":48},"start":{"column":25,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"33","location":{"end":{"column":63,"line":48},"start":{"column":25,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"34","location":{"end":{"column":50,"line":48},"start":{"column":48,"line":48}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"35","location":{"end":{"column":62,"line":48},"start":{"column":52,"line":48}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"36","location":{"end":{"column":46,"line":49},"start":{"column":23,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"37","location":{"end":{"column":46,"line":49},"start":{"column":23,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"38","location":{"end":{"column":43,"line":49},"start":{"column":41,"line":49}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"39","location":{"end":{"column":34,"line":50},"start":{"column":9,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"40","location":{"end":{"column":34,"line":50},"start":{"column":9,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"41","location":{"end":{"column":6,"line":52},"start":{"column":36,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"42","location":{"end":{"column":126,"line":51},"start":{"column":22,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"43","location":{"end":{"column":79,"line":51},"start":{"column":62,"line":51}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"44","location":{"end":{"column":79,"line":51},"start":{"column":69,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"45","location":{"end":{"column":89,"line":51},"start":{"column":86,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"46","location":{"end":{"column":34,"line":54},"start":{"column":9,"line":54}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"47","location":{"end":{"column":34,"line":54},"start":{"column":9,"line":54}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"48","location":{"end":{"column":6,"line":56},"start":{"column":36,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"49","location":{"end":{"column":75,"line":55},"start":{"column":22,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"50","location":{"end":{"column":46,"line":60},"start":{"column":41,"line":60}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"51","location":{"end":{"column":4,"line":82},"start":{"column":83,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"52","location":{"end":{"column":19,"line":64},"start":{"column":7,"line":62}},"mutatorName":"ConditionalExpression","replacement":"case 'boolean':","status":"Killed"},{"id":"53","location":{"end":{"column":21,"line":62},"start":{"column":12,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"54","location":{"end":{"column":70,"line":63},"start":{"column":24,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"55","location":{"end":{"column":10,"line":72},"start":{"column":7,"line":65}},"mutatorName":"ConditionalExpression","replacement":"case 'undefined':","status":"CompileError"},{"id":"56","location":{"end":{"column":23,"line":65},"start":{"column":12,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"57","location":{"end":{"column":52,"line":67},"start":{"column":13,"line":67}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"58","location":{"end":{"column":52,"line":67},"start":{"column":13,"line":67}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"59","location":{"end":{"column":10,"line":69},"start":{"column":54,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"60","location":{"end":{"column":10,"line":72},"start":{"column":16,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"61","location":{"end":{"column":117,"line":70},"start":{"column":26,"line":70}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"62","location":{"end":{"column":10,"line":80},"start":{"column":7,"line":73}},"mutatorName":"ConditionalExpression","replacement":"case 'string':","status":"CompileError"},{"id":"63","location":{"end":{"column":20,"line":73},"start":{"column":12,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"64","location":{"end":{"column":40,"line":75},"start":{"column":13,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"65","location":{"end":{"column":40,"line":75},"start":{"column":13,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"66","location":{"end":{"column":10,"line":77},"start":{"column":42,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"67","location":{"end":{"column":10,"line":80},"start":{"column":16,"line":77}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"68","location":{"end":{"column":106,"line":78},"start":{"column":26,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"69","location":{"end":{"column":4,"line":87},"start":{"column":51,"line":84}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"70","location":{"end":{"column":61,"line":85},"start":{"column":19,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"71","location":{"end":{"column":67,"line":86},"start":{"column":61,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"72","location":{"end":{"column":4,"line":131},"start":{"column":64,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"73","location":{"end":{"column":47,"line":90},"start":{"column":43,"line":90}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"74","location":{"end":{"column":70,"line":90},"start":{"column":53,"line":90}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"75","location":{"end":{"column":6,"line":129},"start":{"column":31,"line":92}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"76","location":{"end":{"column":36,"line":93},"start":{"column":33,"line":93}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"77","location":{"end":{"column":18,"line":94},"start":{"column":11,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"78","location":{"end":{"column":18,"line":94},"start":{"column":11,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"79","location":{"end":{"column":8,"line":128},"start":{"column":20,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"80","location":{"end":{"column":27,"line":96},"start":{"column":16,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"81","location":{"end":{"column":19,"line":103},"start":{"column":11,"line":97}},"mutatorName":"ConditionalExpression","replacement":"case '-r':","status":"Killed"},{"id":"82","location":{"end":{"column":20,"line":97},"start":{"column":16,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"83","location":{"end":{"column":44,"line":99},"start":{"column":17,"line":99}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"84","location":{"end":{"column":44,"line":99},"start":{"column":17,"line":99}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"85","location":{"end":{"column":44,"line":99},"start":{"column":17,"line":99}},"mutatorName":"BooleanLiteral","replacement":"mochaRunnerOptions.require","status":"CompileError"},{"id":"86","location":{"end":{"column":14,"line":101},"start":{"column":46,"line":99}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"87","location":{"end":{"column":46,"line":100},"start":{"column":44,"line":100}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"88","location":{"end":{"column":27,"line":104},"start":{"column":16,"line":104}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"89","location":{"end":{"column":19,"line":107},"start":{"column":11,"line":105}},"mutatorName":"ConditionalExpression","replacement":"case '-t':","status":"Killed"},{"id":"90","location":{"end":{"column":20,"line":105},"start":{"column":16,"line":105}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"91","location":{"end":{"column":30,"line":108},"start":{"column":16,"line":108}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"92","location":{"end":{"column":19,"line":111},"start":{"column":11,"line":109}},"mutatorName":"ConditionalExpression","replacement":"case '-A':","status":"Killed"},{"id":"93","location":{"end":{"column":20,"line":109},"start":{"column":16,"line":109}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"94","location":{"end":{"column":48,"line":110},"start":{"column":44,"line":110}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"95","location":{"end":{"column":22,"line":112},"start":{"column":16,"line":112}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"96","location":{"end":{"column":19,"line":115},"start":{"column":11,"line":113}},"mutatorName":"ConditionalExpression","replacement":"case '-u':","status":"Killed"},{"id":"97","location":{"end":{"column":20,"line":113},"start":{"column":16,"line":113}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"98","location":{"end":{"column":24,"line":116},"start":{"column":16,"line":116}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"99","location":{"end":{"column":19,"line":123},"start":{"column":11,"line":117}},"mutatorName":"ConditionalExpression","replacement":"case '-g':","status":"Killed"},{"id":"100","location":{"end":{"column":20,"line":117},"start":{"column":16,"line":117}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"101","location":{"end":{"column":54,"line":118},"start":{"column":23,"line":118}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"102","location":{"end":{"column":57,"line":119},"start":{"column":17,"line":119}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"103","location":{"end":{"column":57,"line":119},"start":{"column":17,"line":119}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"104","location":{"end":{"column":39,"line":119},"start":{"column":37,"line":119}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"105","location":{"end":{"column":35,"line":119},"start":{"column":32,"line":119}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"106","location":{"end":{"column":56,"line":119},"start":{"column":53,"line":119}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"107","location":{"end":{"column":14,"line":121},"start":{"column":59,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"108","location":{"end":{"column":50,"line":120},"start":{"column":49,"line":120}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"109","location":{"end":{"column":19,"line":126},"start":{"column":11,"line":124}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Killed"},{"id":"110","location":{"end":{"column":82,"line":125},"start":{"column":28,"line":125}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"111","location":{"end":{"column":4,"line":139},"start":{"column":60,"line":133}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"112","location":{"end":{"column":24,"line":134},"start":{"column":9,"line":134}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"113","location":{"end":{"column":24,"line":134},"start":{"column":9,"line":134}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"114","location":{"end":{"column":22,"line":134},"start":{"column":21,"line":134}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"115","location":{"end":{"column":22,"line":134},"start":{"column":21,"line":134}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"116","location":{"end":{"column":6,"line":136},"start":{"column":26,"line":134}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"117","location":{"end":{"column":6,"line":138},"start":{"column":12,"line":136}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"118","location":{"end":{"column":4,"line":147},"start":{"column":63,"line":141}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"119","location":{"end":{"column":24,"line":142},"start":{"column":9,"line":142}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"120","location":{"end":{"column":24,"line":142},"start":{"column":9,"line":142}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"121","location":{"end":{"column":22,"line":142},"start":{"column":21,"line":142}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"122","location":{"end":{"column":22,"line":142},"start":{"column":21,"line":142}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"123","location":{"end":{"column":6,"line":144},"start":{"column":26,"line":142}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"124","location":{"end":{"column":6,"line":146},"start":{"column":12,"line":144}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import * as fs from 'fs';\nimport * as path from 'path';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\n\nimport LibWrapper from './LibWrapper';\nimport { MochaOptions } from './MochaOptions';\nimport { filterConfig, mochaOptionsKey, serializeArguments } from './utils.js';\n\n/**\n * Subset of defaults for mocha options\n * @see https://github.com/mochajs/mocha/blob/master/lib/mocharc.json\n */\nexport const DEFAULT_MOCHA_OPTIONS = Object.freeze({\n  extension: ['js'],\n  file: [],\n  ignore: [],\n  opts: './test/mocha.opts',\n  spec: ['test'],\n  timeout: 2000,\n  ui: 'bdd'\n});\n\nexport default class MochaOptionsLoader {\n  public static inject = tokens(commonTokens.logger);\n  constructor(private readonly log: Logger) {}\n\n  public load(strykerOptions: StrykerOptions): MochaOptions {\n    const mochaOptions = { ...strykerOptions[mochaOptionsKey] } as MochaOptions;\n    return { ...DEFAULT_MOCHA_OPTIONS, ...this.loadMochaOptions(mochaOptions), ...mochaOptions };\n  }\n\n  private loadMochaOptions(overrides: MochaOptions) {\n    if (LibWrapper.loadOptions) {\n      this.log.debug(\"Mocha >= 6 detected. Using mocha's `%s` to load mocha options\", LibWrapper.loadOptions.name);\n      return this.loadMocha6Options(overrides);\n    } else {\n      this.log.warn('DEPRECATED: Mocha < 6 detected. Please upgrade to at least Mocha version 6.');\n      this.log.debug('Mocha < 6 detected. Using custom logic to parse mocha options');\n      return this.loadLegacyMochaOptsFile(overrides.opts);\n    }\n  }\n\n  private loadMocha6Options(overrides: MochaOptions) {\n    const args = serializeArguments(overrides);\n    const loadOptions = LibWrapper.loadOptions || (() => ({}));\n    const rawConfig = loadOptions(args) || {};\n    if (this.log.isTraceEnabled()) {\n      this.log.trace(`Mocha: ${loadOptions.name}([${args.map(arg => `'${arg}'`).join(',')}]) => ${JSON.stringify(rawConfig)}`);\n    }\n    const options = filterConfig(rawConfig);\n    if (this.log.isDebugEnabled()) {\n      this.log.debug(`Loaded options: ${JSON.stringify(options, null, 2)}`);\n    }\n    return options;\n  }\n\n  private loadLegacyMochaOptsFile(opts: false | string | undefined): MochaOptions {\n    switch (typeof opts) {\n      case 'boolean':\n        this.log.debug('Not reading additional mochaOpts from a file');\n        return {};\n      case 'undefined':\n        const defaultMochaOptsFileName = path.resolve(DEFAULT_MOCHA_OPTIONS.opts);\n        if (fs.existsSync(defaultMochaOptsFileName)) {\n          return this.readMochaOptsFile(defaultMochaOptsFileName);\n        } else {\n          this.log.debug('No mocha opts file found, not loading additional mocha options (%s.opts was not defined).', mochaOptionsKey);\n          return {};\n        }\n      case 'string':\n        const optsFileName = path.resolve(opts);\n        if (fs.existsSync(optsFileName)) {\n          return this.readMochaOptsFile(optsFileName);\n        } else {\n          this.log.error(`Could not load opts from \"${optsFileName}\". Please make sure opts file exists.`);\n          return {};\n        }\n    }\n  }\n\n  private readMochaOptsFile(optsFileName: string) {\n    this.log.info(`Loading mochaOpts from \"${optsFileName}\"`);\n    return this.parseOptsFile(fs.readFileSync(optsFileName, 'utf8'));\n  }\n\n  private parseOptsFile(optsFileContent: string): MochaOptions {\n    const options = optsFileContent.split('\\n').map(val => val.trim());\n    const mochaRunnerOptions: MochaOptions = Object.create(null);\n    options.forEach(option => {\n      const args = option.split(' ').filter(Boolean);\n      if (args[0]) {\n        switch (args[0]) {\n          case '--require':\n          case '-r':\n            args.shift();\n            if (!mochaRunnerOptions.require) {\n              mochaRunnerOptions.require = [];\n            }\n            mochaRunnerOptions.require.push(...args);\n            break;\n          case '--timeout':\n          case '-t':\n            mochaRunnerOptions.timeout = this.parseNextInt(args);\n            break;\n          case '--async-only':\n          case '-A':\n            mochaRunnerOptions.asyncOnly = true;\n            break;\n          case '--ui':\n          case '-u':\n            mochaRunnerOptions.ui = this.parseNextString(args);\n            break;\n          case '--grep':\n          case '-g':\n            let arg = `${this.parseNextString(args)}`;\n            if (arg.startsWith('/') && arg.endsWith('/')) {\n              arg = arg.substring(1, arg.length - 1);\n            }\n            mochaRunnerOptions.grep = new RegExp(arg);\n            break;\n          default:\n            this.log.debug(`Ignoring option \"${args[0]}\" as it is not supported.`);\n            break;\n        }\n      }\n    });\n    return mochaRunnerOptions;\n  }\n\n  private parseNextInt(args: string[]): number | undefined {\n    if (args.length > 1) {\n      return parseInt(args[1], 10);\n    } else {\n      return undefined;\n    }\n  }\n\n  private parseNextString(args: string[]): string | undefined {\n    if (args.length > 1) {\n      return args[1];\n    } else {\n      return undefined;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/mocha-runner/src/MochaTestRunner.ts":{"language":"typescript","mutants":[{"id":"125","location":{"end":{"column":44,"line":13},"start":{"column":30,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"126","location":{"end":{"column":4,"line":24},"start":{"column":120,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"127","location":{"end":{"column":4,"line":34},"start":{"column":23,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"128","location":{"end":{"column":31,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"129","location":{"end":{"column":31,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"130","location":{"end":{"column":6,"line":30},"start":{"column":33,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"131","location":{"end":{"column":86,"line":28},"start":{"column":22,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"132","location":{"end":{"column":6,"line":33},"start":{"column":12,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"133","location":{"end":{"column":80,"line":31},"start":{"column":22,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"134","location":{"end":{"column":4,"line":46},"start":{"column":91,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"135","location":{"end":{"column":6,"line":43},"start":{"column":9,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"136","location":{"end":{"column":6,"line":45},"start":{"column":15,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"137","location":{"end":{"column":4,"line":65},"start":{"column":43,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"138","location":{"end":{"column":77,"line":50},"start":{"column":51,"line":50}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"139","location":{"end":{"column":25,"line":52},"start":{"column":9,"line":52}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"140","location":{"end":{"column":25,"line":52},"start":{"column":9,"line":52}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"141","location":{"end":{"column":6,"line":54},"start":{"column":27,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"142","location":{"end":{"column":74,"line":53},"start":{"column":22,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"143","location":{"end":{"column":6,"line":63},"start":{"column":12,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"144","location":{"end":{"column":135,"line":55},"start":{"column":22,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"145","location":{"end":{"column":135,"line":61},"start":{"column":9,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"146","location":{"end":{"column":4,"line":83},"start":{"column":45,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"147","location":{"end":{"column":38,"line":68},"start":{"column":36,"line":68}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"148","location":{"end":{"column":31,"line":69},"start":{"column":9,"line":69}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"149","location":{"end":{"column":31,"line":69},"start":{"column":9,"line":69}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"150","location":{"end":{"column":6,"line":71},"start":{"column":33,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"151","location":{"end":{"column":52,"line":73},"start":{"column":9,"line":73}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"152","location":{"end":{"column":52,"line":73},"start":{"column":9,"line":73}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"153","location":{"end":{"column":43,"line":73},"start":{"column":40,"line":73}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"154","location":{"end":{"column":52,"line":73},"start":{"column":44,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"155","location":{"end":{"column":6,"line":76},"start":{"column":54,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"156","location":{"end":{"column":39,"line":76},"start":{"column":16,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"157","location":{"end":{"column":39,"line":76},"start":{"column":16,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"158","location":{"end":{"column":6,"line":78},"start":{"column":41,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"159","location":{"end":{"column":29,"line":79},"start":{"column":9,"line":79}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"160","location":{"end":{"column":29,"line":79},"start":{"column":9,"line":79}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"161","location":{"end":{"column":29,"line":79},"start":{"column":9,"line":79}},"mutatorName":"BooleanLiteral","replacement":"globPatterns.length","status":"Killed"},{"id":"162","location":{"end":{"column":6,"line":81},"start":{"column":31,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"163","location":{"end":{"column":4,"line":121},"start":{"column":73,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"164","location":{"end":{"column":6,"line":120},"start":{"column":56,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"165","location":{"end":{"column":8,"line":116},"start":{"column":11,"line":87}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"166","location":{"end":{"column":97,"line":89},"start":{"column":44,"line":89}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"167","location":{"end":{"column":95,"line":89},"start":{"column":91,"line":89}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"168","location":{"end":{"column":10,"line":109},"start":{"column":13,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"169","location":{"end":{"column":12,"line":108},"start":{"column":27,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"170","location":{"end":{"column":25,"line":96},"start":{"column":17,"line":96}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"171","location":{"end":{"column":25,"line":96},"start":{"column":17,"line":96}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"172","location":{"end":{"column":14,"line":99},"start":{"column":27,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"173","location":{"end":{"column":14,"line":107},"start":{"column":20,"line":99}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"174","location":{"end":{"column":123,"line":100},"start":{"column":32,"line":100}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"175","location":{"end":{"column":16,"line":106},"start":{"column":23,"line":102}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"176","location":{"end":{"column":42,"line":103},"start":{"column":32,"line":103}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"177","location":{"end":{"column":26,"line":105},"start":{"column":24,"line":105}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"178","location":{"end":{"column":10,"line":115},"start":{"column":25,"line":109}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"179","location":{"end":{"column":12,"line":114},"start":{"column":19,"line":110}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"180","location":{"end":{"column":35,"line":111},"start":{"column":28,"line":111}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"181","location":{"end":{"column":22,"line":113},"start":{"column":20,"line":113}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"182","location":{"end":{"column":8,"line":119},"start":{"column":23,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"183","location":{"end":{"column":4,"line":125},"start":{"column":24,"line":123}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"184","location":{"end":{"column":73,"line":124},"start":{"column":31,"line":124}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"185","location":{"end":{"column":4,"line":131},"start":{"column":34,"line":127}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"186","location":{"end":{"column":6,"line":130},"start":{"column":44,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"187","location":{"end":{"column":4,"line":140},"start":{"column":75,"line":133}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"188","location":{"end":{"column":18,"line":134},"start":{"column":9,"line":134}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"189","location":{"end":{"column":18,"line":134},"start":{"column":9,"line":134}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"190","location":{"end":{"column":6,"line":139},"start":{"column":20,"line":134}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"191","location":{"end":{"column":31,"line":136},"start":{"column":18,"line":136}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"192","location":{"end":{"column":43,"line":136},"start":{"column":41,"line":136}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"193","location":{"end":{"column":27,"line":137},"start":{"column":18,"line":137}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"194","location":{"end":{"column":54,"line":137},"start":{"column":52,"line":137}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"195","location":{"end":{"column":32,"line":138},"start":{"column":18,"line":138}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"196","location":{"end":{"column":44,"line":138},"start":{"column":42,"line":138}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"197","location":{"end":{"column":4,"line":157},"start":{"column":35,"line":142}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"198","location":{"end":{"column":6,"line":149},"start":{"column":83,"line":145}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"199","location":{"end":{"column":39,"line":146},"start":{"column":11,"line":146}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"200","location":{"end":{"column":39,"line":146},"start":{"column":11,"line":146}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"201","location":{"end":{"column":27,"line":146},"start":{"column":24,"line":146}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"202","location":{"end":{"column":39,"line":146},"start":{"column":28,"line":146}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"203","location":{"end":{"column":8,"line":148},"start":{"column":41,"line":146}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"204","location":{"end":{"column":39,"line":147},"start":{"column":32,"line":147}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"205","location":{"end":{"column":16,"line":151},"start":{"column":9,"line":151}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"206","location":{"end":{"column":16,"line":151},"start":{"column":9,"line":151}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"207","location":{"end":{"column":6,"line":156},"start":{"column":18,"line":151}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"208","location":{"end":{"column":4,"line":164},"start":{"column":32,"line":159}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"209","location":{"end":{"column":34,"line":160},"start":{"column":9,"line":160}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"210","location":{"end":{"column":34,"line":160},"start":{"column":9,"line":160}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"211","location":{"end":{"column":6,"line":163},"start":{"column":36,"line":160}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"212","location":{"end":{"column":144,"line":161},"start":{"column":62,"line":161}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"213","location":{"end":{"column":102,"line":161},"start":{"column":99,"line":161}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as path from 'path';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { RunResult, RunStatus, TestRunner } from '@stryker-mutator/api/test_runner';\n\nimport LibWrapper from './LibWrapper';\nimport { MochaOptions } from './MochaOptions';\nimport { StrykerMochaReporter } from './StrykerMochaReporter';\nimport { evalGlobal, mochaOptionsKey } from './utils.js';\n\nconst DEFAULT_TEST_PATTERN = 'test/**/*.js';\n\nexport default class MochaTestRunner implements TestRunner {\n  private testFileNames: string[];\n  private readonly mochaOptions: MochaOptions;\n\n  public static inject = tokens(commonTokens.logger, commonTokens.sandboxFileNames, commonTokens.options);\n  constructor(private readonly log: Logger, private readonly allFileNames: readonly string[], options: StrykerOptions) {\n    this.mochaOptions = options[mochaOptionsKey];\n    this.additionalRequires();\n    StrykerMochaReporter.log = log;\n  }\n\n  public init(): void {\n    if (LibWrapper.handleFiles) {\n      this.log.debug(\"Mocha >= 6 detected. Using mocha's `handleFiles` to load files\");\n      this.testFileNames = this.mocha6DiscoverFiles(LibWrapper.handleFiles);\n    } else {\n      this.log.debug('Mocha < 6 detected. Using custom logic to discover files');\n      this.testFileNames = this.legacyDiscoverFiles();\n    }\n  }\n\n  private mocha6DiscoverFiles(handleFiles: (options: MochaOptions) => string[]): string[] {\n    const originalProcessExit = process.exit;\n    try {\n      // process.exit unfortunate side effect: https://github.com/mochajs/mocha/blob/07ea8763c663bdd3fe1f8446cdb62dae233f4916/lib/cli/run-helpers.js#L174\n      (process as any).exit = () => {};\n      const files = handleFiles(this.mochaOptions);\n      return files;\n    } finally {\n      process.exit = originalProcessExit;\n    }\n  }\n\n  private legacyDiscoverFiles(): string[] {\n    const globPatterns = this.mochaFileGlobPatterns();\n    const globPatternsAbsolute = globPatterns.map(glob => path.resolve(glob));\n    const fileNames = LibWrapper.multimatch(this.allFileNames.slice(), globPatternsAbsolute);\n    if (fileNames.length) {\n      this.log.debug(`Using files: ${JSON.stringify(fileNames, null, 2)}`);\n    } else {\n      this.log.debug(`Tried ${JSON.stringify(globPatternsAbsolute, null, 2)} on files: ${JSON.stringify(this.allFileNames, null, 2)}.`);\n      throw new Error(\n        `[${MochaTestRunner.name}] No files discovered (tried pattern(s) ${JSON.stringify(\n          globPatterns,\n          null,\n          2\n        )}). Please specify the files (glob patterns) containing your tests in ${mochaOptionsKey}.files in your stryker.conf.js file.`\n      );\n    }\n    return fileNames;\n  }\n  private mochaFileGlobPatterns(): string[] {\n    // Use both `spec` as `files`\n    const globPatterns: string[] = [];\n    if (this.mochaOptions.spec) {\n      globPatterns.push(...this.mochaOptions.spec);\n    }\n\n    if (typeof this.mochaOptions.files === 'string') {\n      // `files` if for backward compat\n      globPatterns.push(this.mochaOptions.files);\n    } else if (this.mochaOptions.files) {\n      globPatterns.push(...this.mochaOptions.files);\n    }\n    if (!globPatterns.length) {\n      globPatterns.push(DEFAULT_TEST_PATTERN);\n    }\n    return globPatterns;\n  }\n\n  public run({ testHooks }: { testHooks?: string }): Promise<RunResult> {\n    return new Promise<RunResult>((resolve, reject) => {\n      try {\n        this.purgeFiles();\n        const mocha = new LibWrapper.Mocha({ reporter: StrykerMochaReporter as any, bail: true });\n        this.configure(mocha);\n        this.addTestHooks(mocha, testHooks);\n        this.addFiles(mocha);\n        try {\n          mocha.run(() => {\n            const reporter = StrykerMochaReporter.currentInstance;\n            if (reporter) {\n              const result: RunResult = reporter.runResult;\n              resolve(result);\n            } else {\n              const errorMsg = 'The StrykerMochaReporter was not instantiated properly. Could not retrieve the RunResult.';\n              this.log.error(errorMsg);\n              resolve({\n                errorMessages: [errorMsg],\n                status: RunStatus.Error,\n                tests: []\n              });\n            }\n          });\n        } catch (error) {\n          resolve({\n            errorMessages: [error],\n            status: RunStatus.Error,\n            tests: []\n          });\n        }\n      } catch (error) {\n        this.log.error(error);\n        reject(error);\n      }\n    });\n  }\n\n  private purgeFiles() {\n    this.allFileNames.forEach(fileName => delete require.cache[fileName]);\n  }\n\n  private addFiles(mocha: Mocha) {\n    this.testFileNames.forEach(fileName => {\n      mocha.addFile(fileName);\n    });\n  }\n\n  private addTestHooks(mocha: Mocha, testHooks: string | undefined): void {\n    if (testHooks) {\n      const suite = (mocha as any).suite;\n      suite.emit('pre-require', global, '', mocha);\n      suite.emit('require', evalGlobal(testHooks), '', mocha);\n      suite.emit('post-require', global, '', mocha);\n    }\n  }\n\n  private configure(mocha: Mocha) {\n    const options = this.mochaOptions;\n\n    function setIfDefined<T>(value: T | undefined, operation: (input: T) => void) {\n      if (typeof value !== 'undefined') {\n        operation.apply(mocha, [value]);\n      }\n    }\n\n    if (options) {\n      setIfDefined(options.asyncOnly, mocha.asyncOnly);\n      setIfDefined(options.timeout, mocha.timeout);\n      setIfDefined(options.ui, mocha.ui);\n      setIfDefined(options.grep, mocha.grep);\n    }\n  }\n\n  private additionalRequires() {\n    if (this.mochaOptions.require) {\n      const modulesToRequire = this.mochaOptions.require.map(moduleName => (moduleName.startsWith('.') ? path.resolve(moduleName) : moduleName));\n      modulesToRequire.forEach(LibWrapper.require);\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/mocha-runner/src/StrykerMochaReporter.ts":{"language":"typescript","mutants":[{"id":"214","location":{"end":{"column":4,"line":22},"start":{"column":61,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"215","location":{"end":{"column":4,"line":66},"start":{"column":28,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"216","location":{"end":{"column":27,"line":25},"start":{"column":20,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"217","location":{"end":{"column":6,"line":34},"start":{"column":35,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"218","location":{"end":{"column":8,"line":32},"start":{"column":24,"line":28}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"219","location":{"end":{"column":26,"line":29},"start":{"column":24,"line":29}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage"},{"id":"220","location":{"end":{"column":18,"line":31},"start":{"column":16,"line":31}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"221","location":{"end":{"column":63,"line":33},"start":{"column":38,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"222","location":{"end":{"column":26,"line":36},"start":{"column":20,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"223","location":{"end":{"column":6,"line":44},"start":{"column":43,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"224","location":{"end":{"column":8,"line":41},"start":{"column":33,"line":37}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"225","location":{"end":{"column":25,"line":42},"start":{"column":7,"line":42}},"mutatorName":"UpdateOperator","replacement":"this.passedCount--","status":"NoCoverage"},{"id":"226","location":{"end":{"column":26,"line":46},"start":{"column":20,"line":46}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"227","location":{"end":{"column":6,"line":60},"start":{"column":53,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"228","location":{"end":{"column":8,"line":52},"start":{"column":33,"line":47}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"229","location":{"end":{"column":39,"line":48},"start":{"column":26,"line":48}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"230","location":{"end":{"column":40,"line":53},"start":{"column":11,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"231","location":{"end":{"column":40,"line":53},"start":{"column":11,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"232","location":{"end":{"column":40,"line":53},"start":{"column":11,"line":53}},"mutatorName":"BooleanLiteral","replacement":"this.runResult.errorMessages","status":"CompileError"},{"id":"233","location":{"end":{"column":8,"line":55},"start":{"column":42,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"234","location":{"end":{"column":42,"line":54},"start":{"column":40,"line":54}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage"},{"id":"235","location":{"end":{"column":52,"line":57},"start":{"column":11,"line":57}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"236","location":{"end":{"column":52,"line":57},"start":{"column":11,"line":57}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"237","location":{"end":{"column":8,"line":59},"start":{"column":54,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"238","location":{"end":{"column":97,"line":58},"start":{"column":40,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"239","location":{"end":{"column":25,"line":62},"start":{"column":20,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"240","location":{"end":{"column":6,"line":65},"start":{"column":33,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"241","location":{"end":{"column":78,"line":64},"start":{"column":38,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { Logger } from '@stryker-mutator/api/logging';\nimport { RunResult, RunStatus, TestStatus } from '@stryker-mutator/api/test_runner';\n\nimport Timer from './Timer';\n\nexport class StrykerMochaReporter {\n  /*\n   * The stryker logger instance injected into this plugin\n   * Needs to be set from 'the outside' because mocha doesn't really have a nice way of providing\n   * data to reporters...\n   */\n  public static log: Logger;\n  public runResult: RunResult;\n  private readonly timer = new Timer();\n  private passedCount = 0;\n\n  public static currentInstance: StrykerMochaReporter | undefined;\n\n  constructor(private readonly runner: NodeJS.EventEmitter) {\n    this.registerEvents();\n    StrykerMochaReporter.currentInstance = this;\n  }\n\n  private registerEvents() {\n    this.runner.on('start', () => {\n      this.passedCount = 0;\n      this.timer.reset();\n      this.runResult = {\n        errorMessages: [],\n        status: RunStatus.Error,\n        tests: []\n      };\n      StrykerMochaReporter.log.debug('Starting Mocha test run');\n    });\n\n    this.runner.on('pass', (test: any) => {\n      this.runResult.tests.push({\n        name: test.fullTitle(),\n        status: TestStatus.Success,\n        timeSpentMs: this.timer.elapsedMs()\n      });\n      this.passedCount++;\n      this.timer.reset();\n    });\n\n    this.runner.on('fail', (test: any, err: any) => {\n      this.runResult.tests.push({\n        failureMessages: [err.message],\n        name: test.fullTitle(),\n        status: TestStatus.Failed,\n        timeSpentMs: this.timer.elapsedMs()\n      });\n      if (!this.runResult.errorMessages) {\n        this.runResult.errorMessages = [];\n      }\n      this.runResult.errorMessages.push(err.message);\n      if (StrykerMochaReporter.log.isTraceEnabled()) {\n        StrykerMochaReporter.log.trace(`Test failed: ${test.fullTitle()}. Error: ${err.message}`);\n      }\n    });\n\n    this.runner.on('end', () => {\n      this.runResult.status = RunStatus.Complete;\n      StrykerMochaReporter.log.debug('Mocha test run completed: %s/%s passed', this.passedCount, this.runResult.tests.length);\n    });\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/mocha-runner/src/Timer.ts":{"language":"typescript","mutants":[{"id":"242","location":{"end":{"column":4,"line":8},"start":{"column":17,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"243","location":{"end":{"column":4,"line":12},"start":{"column":18,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"244","location":{"end":{"column":4,"line":16},"start":{"column":22,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"245","location":{"end":{"column":38,"line":15},"start":{"column":37,"line":15}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"}],"source":"// A test can mock away the 'real' Date class. Capture it while we still can.\nconst RealDate = Date;\nexport default class Timer {\n  private start: Date;\n\n  constructor() {\n    this.reset();\n  }\n\n  public reset() {\n    this.start = new RealDate();\n  }\n\n  public elapsedMs() {\n    return new RealDate().getTime() - this.start.getTime();\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/mocha-runner/src/index.ts":{"language":"typescript","mutants":[{"id":"246","location":{"end":{"column":2,"line":10},"start":{"column":31,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"247","location":{"end":{"column":63,"line":8},"start":{"column":49,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"248","location":{"end":{"column":52,"line":9},"start":{"column":45,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"249","location":{"end":{"column":2,"line":15},"start":{"column":87,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"250","location":{"end":{"column":40,"line":14},"start":{"column":32,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"}],"source":"import { BaseContext, commonTokens, declareClassPlugin, declareFactoryPlugin, Injector, PluginKind, tokens } from '@stryker-mutator/api/plugin';\n\nimport MochaConfigEditor from './MochaConfigEditor';\nimport MochaOptionsLoader from './MochaOptionsLoader';\nimport MochaTestRunner from './MochaTestRunner';\n\nexport const strykerPlugins = [\n  declareFactoryPlugin(PluginKind.ConfigEditor, 'mocha-runner', mochaConfigEditorFactory),\n  declareClassPlugin(PluginKind.TestRunner, 'mocha', MochaTestRunner)\n];\n\nmochaConfigEditorFactory.inject = tokens(commonTokens.injector);\nfunction mochaConfigEditorFactory(injector: Injector<BaseContext>): MochaConfigEditor {\n  return injector.provideClass('loader', MochaOptionsLoader).injectClass(MochaConfigEditor);\n}\n"},"/home/runner/work/stryker/stryker/packages/mocha-runner/src/utils.ts":{"language":"typescript","mutants":[{"id":"251","location":{"end":{"column":2,"line":10},"start":{"column":42,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"252","location":{"end":{"column":36,"line":8},"start":{"column":27,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"253","location":{"end":{"column":2,"line":24},"start":{"column":64,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"254","location":{"end":{"column":28,"line":13},"start":{"column":26,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"255","location":{"end":{"column":4,"line":22},"start":{"column":44,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"256","location":{"end":{"column":25,"line":15},"start":{"column":15,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"257","location":{"end":{"column":34,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"258","location":{"end":{"column":34,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"259","location":{"end":{"column":25,"line":17},"start":{"column":22,"line":17}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"260","location":{"end":{"column":34,"line":17},"start":{"column":26,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"261","location":{"end":{"column":6,"line":19},"start":{"column":36,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"262","location":{"end":{"column":36,"line":19},"start":{"column":16,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"263","location":{"end":{"column":36,"line":19},"start":{"column":16,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"264","location":{"end":{"column":6,"line":21},"start":{"column":38,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"265","location":{"end":{"column":31,"line":20},"start":{"column":28,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"266","location":{"end":{"column":46,"line":26},"start":{"column":32,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"267","location":{"end":{"column":147,"line":28},"start":{"column":47,"line":28}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"268","location":{"end":{"column":59,"line":28},"start":{"column":48,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"269","location":{"end":{"column":70,"line":28},"start":{"column":61,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"270","location":{"end":{"column":81,"line":28},"start":{"column":72,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"271","location":{"end":{"column":95,"line":28},"start":{"column":83,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"272","location":{"end":{"column":101,"line":28},"start":{"column":97,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"273","location":{"end":{"column":109,"line":28},"start":{"column":103,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"274","location":{"end":{"column":120,"line":28},"start":{"column":111,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"275","location":{"end":{"column":130,"line":28},"start":{"column":122,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"276","location":{"end":{"column":138,"line":28},"start":{"column":132,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"277","location":{"end":{"column":146,"line":28},"start":{"column":140,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"278","location":{"end":{"column":2,"line":52},"start":{"column":79,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"279","location":{"end":{"column":104,"line":37},"start":{"column":13,"line":37}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"280","location":{"end":{"column":103,"line":37},"start":{"column":55,"line":37}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"281","location":{"end":{"column":103,"line":37},"start":{"column":74,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"282","location":{"end":{"column":103,"line":37},"start":{"column":74,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"283","location":{"end":{"column":87,"line":37},"start":{"column":84,"line":37}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"284","location":{"end":{"column":70,"line":38},"start":{"column":14,"line":38}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"285","location":{"end":{"column":40,"line":44},"start":{"column":7,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"286","location":{"end":{"column":40,"line":44},"start":{"column":7,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"287","location":{"end":{"column":21,"line":44},"start":{"column":19,"line":44}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"288","location":{"end":{"column":4,"line":50},"start":{"column":42,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"289","location":{"end":{"column":22,"line":45},"start":{"column":9,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"290","location":{"end":{"column":22,"line":45},"start":{"column":9,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"291","location":{"end":{"column":22,"line":45},"start":{"column":9,"line":45}},"mutatorName":"BooleanLiteral","replacement":"options.spec","status":"CompileError"},{"id":"292","location":{"end":{"column":6,"line":47},"start":{"column":24,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"293","location":{"end":{"column":24,"line":46},"start":{"column":22,"line":46}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage"},{"id":"294","location":{"end":{"column":87,"line":49},"start":{"column":25,"line":49}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"}],"source":"import { MochaOptions } from './MochaOptions';\n\n/**\n * Executes a piece of javascript code in global scope while passing the `require` function\n * @param body The JavaScript to execute\n */\nexport function evalGlobal(body: string) {\n  const fn = new Function('require', body);\n  fn(require);\n}\n\nexport function serializeArguments(mochaOptions: MochaOptions) {\n  const args: string[] = [];\n  Object.keys(mochaOptions).forEach(key => {\n    args.push(`--${key}`);\n    const value: any = (mochaOptions as any)[key];\n    if (typeof value === 'string') {\n      args.push(value);\n    } else if (Array.isArray(value)) {\n      args.push(value.join(','));\n    }\n  });\n  return args;\n}\n\nexport const mochaOptionsKey = 'mochaOptions';\n\nconst SUPPORTED_MOCHA_OPTIONS = Object.freeze(['extension', 'require', 'timeout', 'async-only', 'ui', 'grep', 'exclude', 'ignore', 'spec', 'file']);\n\n/**\n * Filter out those config values that are actually useful to run mocha with Stryker\n * @param rawConfig The raw parsed mocha configuration\n */\nexport function filterConfig(rawConfig: { [key: string]: any }): MochaOptions {\n  const options: MochaOptions = {};\n  Object.keys(rawConfig)\n    .filter(rawOption => SUPPORTED_MOCHA_OPTIONS.some(supportedOption => rawOption === supportedOption))\n    .forEach(option => ((options as any)[option] = rawConfig[option]));\n\n  // Config file can also contain positional arguments. They are provided under the `_` key\n  // For example:\n  // When mocha.opts contains \"--async-only test/**/*.js\", then \"test/**/*.js will be the positional argument\n  // We must provide it to mocha as \"spec\"\n  if (rawConfig._ && rawConfig._.length) {\n    if (!options.spec) {\n      options.spec = [];\n    }\n    const specs = options.spec;\n    rawConfig._.forEach((positionalArgument: string) => specs.push(positionalArgument));\n  }\n  return options;\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}