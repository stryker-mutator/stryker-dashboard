{"files":{"/home/runner/work/stryker/stryker/packages/karma-runner/src/KarmaTestRunner.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":37},"start":{"column":102,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":4,"line":49},"start":{"column":32,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2","location":{"end":{"column":6,"line":48},"start":{"column":38,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3","location":{"end":{"column":53,"line":41},"start":{"column":37,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"4","location":{"end":{"column":4,"line":61},"start":{"column":79,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"5","location":{"end":{"column":64,"line":52},"start":{"column":49,"line":52}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"6","location":{"end":{"column":64,"line":52},"start":{"column":49,"line":52}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"7","location":{"end":{"column":61,"line":52},"start":{"column":59,"line":52}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"8","location":{"end":{"column":64,"line":52},"start":{"column":62,"line":52}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"9","location":{"end":{"column":50,"line":53},"start":{"column":9,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"10","location":{"end":{"column":50,"line":53},"start":{"column":9,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"11","location":{"end":{"column":34,"line":53},"start":{"column":31,"line":53}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"12","location":{"end":{"column":6,"line":57},"start":{"column":52,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"13","location":{"end":{"column":4,"line":68},"start":{"column":65,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"14","location":{"end":{"column":6,"line":66},"start":{"column":51,"line":64}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"15","location":{"end":{"column":28,"line":65},"start":{"column":20,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"16","location":{"end":{"column":4,"line":76},"start":{"column":80,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"17","location":{"end":{"column":6,"line":75},"start":{"column":33,"line":71}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"18","location":{"end":{"column":4,"line":83},"start":{"column":22,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"19","location":{"end":{"column":33,"line":79},"start":{"column":31,"line":79}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"20","location":{"end":{"column":35,"line":80},"start":{"column":33,"line":80}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"21","location":{"end":{"column":4,"line":92},"start":{"column":34,"line":88}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"22","location":{"end":{"column":46,"line":89},"start":{"column":33,"line":89}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"23","location":{"end":{"column":6,"line":91},"start":{"column":76,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"24","location":{"end":{"column":4,"line":99},"start":{"column":33,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"25","location":{"end":{"column":47,"line":95},"start":{"column":33,"line":95}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"26","location":{"end":{"column":6,"line":97},"start":{"column":67,"line":95}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"27","location":{"end":{"column":47,"line":98},"start":{"column":33,"line":98}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"28","location":{"end":{"column":4,"line":105},"start":{"column":30,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"29","location":{"end":{"column":50,"line":102},"start":{"column":33,"line":102}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"30","location":{"end":{"column":6,"line":104},"start":{"column":116,"line":102}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"31","location":{"end":{"column":4,"line":111},"start":{"column":33,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"32","location":{"end":{"column":47,"line":108},"start":{"column":33,"line":108}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"33","location":{"end":{"column":6,"line":110},"start":{"column":75,"line":108}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"34","location":{"end":{"column":4,"line":121},"start":{"column":27,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"35","location":{"end":{"column":48,"line":114},"start":{"column":33,"line":114}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"36","location":{"end":{"column":6,"line":116},"start":{"column":69,"line":114}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"37","location":{"end":{"column":48,"line":117},"start":{"column":33,"line":117}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"38","location":{"end":{"column":6,"line":120},"start":{"column":72,"line":117}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"39","location":{"end":{"column":68,"line":118},"start":{"column":22,"line":118}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"40","location":{"end":{"column":4,"line":130},"start":{"column":23,"line":123}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"41","location":{"end":{"column":6,"line":129},"start":{"column":41,"line":124}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"42","location":{"end":{"column":43,"line":125},"start":{"column":24,"line":125}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"43","location":{"end":{"column":8,"line":128},"start":{"column":57,"line":125}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"44","location":{"end":{"column":46,"line":126},"start":{"column":24,"line":126}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"45","location":{"end":{"column":4,"line":139},"start":{"column":41,"line":132}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"46","location":{"end":{"column":6,"line":138},"start":{"column":12,"line":133}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"47","location":{"end":{"column":4,"line":152},"start":{"column":31,"line":141}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"48","location":{"end":{"column":122,"line":144},"start":{"column":9,"line":144}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"49","location":{"end":{"column":122,"line":144},"start":{"column":9,"line":144}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"50","location":{"end":{"column":90,"line":144},"start":{"column":88,"line":144}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"51","location":{"end":{"column":53,"line":144},"start":{"column":51,"line":144}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"52","location":{"end":{"column":50,"line":144},"start":{"column":9,"line":144}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"53","location":{"end":{"column":50,"line":144},"start":{"column":9,"line":144}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"54","location":{"end":{"column":34,"line":144},"start":{"column":31,"line":144}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"55","location":{"end":{"column":87,"line":144},"start":{"column":54,"line":144}},"mutatorName":"BooleanLiteral","replacement":"this.currentErrorMessages.length","status":"Killed"},{"id":"56","location":{"end":{"column":122,"line":144},"start":{"column":91,"line":144}},"mutatorName":"BooleanLiteral","replacement":"this.currentTestResults.length","status":"Killed"},{"id":"57","location":{"end":{"column":6,"line":146},"start":{"column":124,"line":144}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"58","location":{"end":{"column":48,"line":146},"start":{"column":16,"line":146}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"59","location":{"end":{"column":48,"line":146},"start":{"column":16,"line":146}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"60","location":{"end":{"column":6,"line":149},"start":{"column":50,"line":146}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"61","location":{"end":{"column":6,"line":151},"start":{"column":12,"line":149}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger, LoggerFactoryMethod } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { CoverageCollection, CoveragePerTestResult, RunResult, RunStatus, TestResult, TestRunner } from '@stryker-mutator/api/test_runner';\nimport * as karma from 'karma';\n\nimport strykerKarmaConf = require('./starters/stryker-karma.conf');\nimport ProjectStarter from './starters/ProjectStarter';\nimport StrykerKarmaSetup, { KARMA_CONFIG_KEY } from './StrykerKarmaSetup';\nimport StrykerReporter from './StrykerReporter';\nimport TestHooksMiddleware from './TestHooksMiddleware';\n\nexport interface ConfigOptions extends karma.ConfigOptions {\n  detached?: boolean;\n}\n\nexport default class KarmaTestRunner implements TestRunner {\n  private currentTestResults: TestResult[];\n  private currentErrorMessages: string[];\n  private currentCoverageReport?: CoverageCollection | CoveragePerTestResult;\n  private currentRunStatus: RunStatus;\n  private readonly testHooksMiddleware = TestHooksMiddleware.instance;\n  private readonly starter: ProjectStarter;\n  public port: undefined | number;\n\n  public static inject = tokens(commonTokens.logger, commonTokens.getLogger, commonTokens.options);\n  constructor(private readonly log: Logger, getLogger: LoggerFactoryMethod, options: StrykerOptions) {\n    const setup = this.loadSetup(options);\n    this.starter = new ProjectStarter(getLogger, setup);\n    this.setGlobals(setup, getLogger);\n    this.cleanRun();\n    this.listenToServerStart();\n    this.listenToRunComplete();\n    this.listenToSpecComplete();\n    this.listenToCoverage();\n    this.listenToError();\n  }\n\n  public init(): Promise<void> {\n    return new Promise((res, rej) => {\n      StrykerReporter.instance.once('browsers_ready', res);\n      this.starter\n        .start()\n        .then(() => {\n          /*noop*/\n        })\n        .catch(rej);\n    });\n  }\n\n  public async run({ testHooks }: { testHooks?: string }): Promise<RunResult> {\n    this.testHooksMiddleware.currentTestHooks = testHooks || '';\n    if (this.currentRunStatus !== RunStatus.Error) {\n      // Only run when there was no compile error\n      // An compile error can happen in case of angular-cli\n      await this.runServer();\n    }\n    const runResult = this.collectRunResult();\n    this.cleanRun();\n    return runResult;\n  }\n\n  private loadSetup(options: StrykerOptions): StrykerKarmaSetup {\n    const defaultKarmaConfig: StrykerKarmaSetup = {\n      projectType: 'custom'\n    };\n    return Object.assign(defaultKarmaConfig, options[KARMA_CONFIG_KEY]);\n  }\n\n  private setGlobals(setup: StrykerKarmaSetup, getLogger: LoggerFactoryMethod) {\n    strykerKarmaConf.setGlobals({\n      getLogger,\n      karmaConfig: setup.config,\n      karmaConfigFile: setup.configFile\n    });\n  }\n\n  private cleanRun() {\n    this.currentTestResults = [];\n    this.currentErrorMessages = [];\n    this.currentCoverageReport = undefined;\n    this.currentRunStatus = RunStatus.Complete;\n  }\n\n  // Don't use dispose() to stop karma (using karma.stopper.stop)\n  // It only works when in `detached` mode, as specified here: http://karma-runner.github.io/1.0/config/configuration-file.html\n\n  private listenToSpecComplete() {\n    StrykerReporter.instance.on('test_result', (testResult: TestResult) => {\n      this.currentTestResults.push(testResult);\n    });\n  }\n\n  private listenToServerStart() {\n    StrykerReporter.instance.on('server_start', (port: number) => {\n      this.port = port;\n    });\n    StrykerReporter.instance.on('server_start', () => {});\n  }\n\n  private listenToCoverage() {\n    StrykerReporter.instance.on('coverage_report', (coverageReport: CoverageCollection | CoveragePerTestResult) => {\n      this.currentCoverageReport = coverageReport;\n    });\n  }\n\n  private listenToRunComplete() {\n    StrykerReporter.instance.on('run_complete', (runStatus: RunStatus) => {\n      this.currentRunStatus = runStatus;\n    });\n  }\n\n  private listenToError() {\n    StrykerReporter.instance.on('browser_error', (error: string) => {\n      this.currentErrorMessages.push(error);\n    });\n    StrykerReporter.instance.on('compile_error', (errors: string[]) => {\n      errors.forEach(error => this.currentErrorMessages.push(error));\n      this.currentRunStatus = RunStatus.Error;\n    });\n  }\n\n  private runServer() {\n    return new Promise<void>(resolve => {\n      karma.runner.run({ port: this.port }, exitCode => {\n        this.log.debug('karma run done with ', exitCode);\n        resolve();\n      });\n    });\n  }\n\n  private collectRunResult(): RunResult {\n    return {\n      coverage: this.currentCoverageReport,\n      errorMessages: this.currentErrorMessages,\n      status: this.determineRunState(),\n      tests: this.currentTestResults\n    };\n  }\n\n  private determineRunState() {\n    // Karma will report an Error if no tests had executed.\n    // This is not an \"error\" in Stryker terms\n    if (this.currentRunStatus === RunStatus.Error && !this.currentErrorMessages.length && !this.currentTestResults.length) {\n      return RunStatus.Complete;\n    } else if (this.currentErrorMessages.length) {\n      // Karma will return Complete when there are runtime errors\n      return RunStatus.Error;\n    } else {\n      return this.currentRunStatus;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/StrykerKarmaSetup.ts":{"language":"typescript","mutants":[{"id":"62","location":{"end":{"column":40,"line":3},"start":{"column":33,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as karma from 'karma';\n\nexport const KARMA_CONFIG_KEY = 'karma';\n\nexport type ProjectKind = 'custom' | 'angular-cli';\n\nexport interface NgTestArguments {\n  [key: string]: string | undefined;\n}\n\nexport interface NgConfigOptions {\n  testArguments?: NgTestArguments;\n}\n\nexport default interface StrykerKarmaSetup {\n  projectType: ProjectKind;\n  configFile?: string;\n  config?: karma.ConfigOptions;\n  ngConfig?: NgConfigOptions;\n}\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/StrykerReporter.ts":{"language":"typescript","mutants":[{"id":"63","location":{"end":{"column":30,"line":25},"start":{"column":28,"line":25}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"64","location":{"end":{"column":4,"line":29},"start":{"column":25,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"65","location":{"end":{"column":4,"line":37},"start":{"column":49,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"66","location":{"end":{"column":24,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"67","location":{"end":{"column":24,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"68","location":{"end":{"column":24,"line":33},"start":{"column":9,"line":33}},"mutatorName":"BooleanLiteral","replacement":"this._instance","status":"Killed"},{"id":"69","location":{"end":{"column":6,"line":35},"start":{"column":26,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"70","location":{"end":{"column":4,"line":41},"start":{"column":51,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"71","location":{"end":{"column":29,"line":40},"start":{"column":15,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"72","location":{"end":{"column":4,"line":58},"start":{"column":72,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"73","location":{"end":{"column":78,"line":44},"start":{"column":77,"line":44}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"74","location":{"end":{"column":71,"line":44},"start":{"column":36,"line":44}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"75","location":{"end":{"column":67,"line":44},"start":{"column":66,"line":44}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"76","location":{"end":{"column":59,"line":44},"start":{"column":58,"line":44}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"77","location":{"end":{"column":71,"line":44},"start":{"column":68,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"78","location":{"end":{"column":75,"line":44},"start":{"column":73,"line":44}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"79","location":{"end":{"column":21,"line":46},"start":{"column":9,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"80","location":{"end":{"column":21,"line":46},"start":{"column":9,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"81","location":{"end":{"column":6,"line":48},"start":{"column":23,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"82","location":{"end":{"column":28,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"83","location":{"end":{"column":28,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"84","location":{"end":{"column":6,"line":50},"start":{"column":30,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"85","location":{"end":{"column":6,"line":56},"start":{"column":36,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"86","location":{"end":{"column":28,"line":57},"start":{"column":15,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"87","location":{"end":{"column":4,"line":62},"start":{"column":69,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"88","location":{"end":{"column":29,"line":61},"start":{"column":15,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"89","location":{"end":{"column":4,"line":66},"start":{"column":53,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"90","location":{"end":{"column":27,"line":65},"start":{"column":15,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"91","location":{"end":{"column":4,"line":70},"start":{"column":128,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"92","location":{"end":{"column":32,"line":69},"start":{"column":15,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"93","location":{"end":{"column":4,"line":74},"start":{"column":43,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"94","location":{"end":{"column":31,"line":73},"start":{"column":15,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"95","location":{"end":{"column":4,"line":83},"start":{"column":67,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"96","location":{"end":{"column":22,"line":78},"start":{"column":9,"line":78}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"97","location":{"end":{"column":22,"line":78},"start":{"column":9,"line":78}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"98","location":{"end":{"column":6,"line":80},"start":{"column":24,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"99","location":{"end":{"column":32,"line":79},"start":{"column":17,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"100","location":{"end":{"column":6,"line":82},"start":{"column":12,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"101","location":{"end":{"column":32,"line":81},"start":{"column":17,"line":81}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"102","location":{"end":{"column":4,"line":89},"start":{"column":58,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"103","location":{"end":{"column":30,"line":88},"start":{"column":15,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"104","location":{"end":{"column":4,"line":99},"start":{"column":68,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"105","location":{"end":{"column":31,"line":92},"start":{"column":9,"line":92}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"106","location":{"end":{"column":31,"line":92},"start":{"column":9,"line":92}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"107","location":{"end":{"column":6,"line":94},"start":{"column":33,"line":92}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"108","location":{"end":{"column":31,"line":94},"start":{"column":16,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"109","location":{"end":{"column":31,"line":94},"start":{"column":16,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"110","location":{"end":{"column":6,"line":96},"start":{"column":33,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"111","location":{"end":{"column":6,"line":98},"start":{"column":12,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { EventEmitter } from 'events';\n\nimport { CoverageCollection, CoverageCollectionPerTest, RunStatus, TestResult, TestStatus } from '@stryker-mutator/api/test_runner';\nimport * as karma from 'karma';\n\nexport interface KarmaSpec {\n  description: string;\n  id: string;\n  skipped: boolean;\n  success: boolean;\n  time: number;\n  suite: string[];\n  log: string[];\n}\n\n/**\n * This is a singleton implementation of a KarmaReporter.\n * It is loaded by karma and functions as a bridge between the karma world and the stryker world\n *\n * It uses properties as functions because karma is not able to find actual methods.\n *\n * i.e. use `public readonly onFoo = () => {}` instead of `onFoo() { }`.\n */\nexport default class StrykerReporter extends EventEmitter implements karma.Reporter {\n  public adapters: any[] = [];\n\n  private constructor() {\n    super();\n  }\n\n  private static _instance = new StrykerReporter();\n  public static get instance(): StrykerReporter {\n    if (!this._instance) {\n      this._instance = new StrykerReporter();\n    }\n    return this._instance;\n  }\n\n  public readonly onListening = (port: number) => {\n    this.emit('server_start', port);\n  };\n\n  public readonly onSpecComplete = (_browser: any, spec: KarmaSpec) => {\n    const name = spec.suite.reduce((name, suite) => name + suite + ' ', '') + spec.description;\n    let status = TestStatus.Failed;\n    if (spec.skipped) {\n      status = TestStatus.Skipped;\n    } else if (spec.success) {\n      status = TestStatus.Success;\n    }\n    const testResult: TestResult = {\n      failureMessages: spec.log,\n      name,\n      status,\n      timeSpentMs: spec.time\n    };\n    this.emit('test_result', testResult);\n  };\n\n  public readonly onRunComplete = (runResult: karma.TestResults) => {\n    this.emit('run_complete', this.collectRunState(runResult));\n  };\n\n  public readonly onLoadError = (...args: any[]) => {\n    this.emit('load_error', ...args);\n  };\n\n  public readonly onBrowserComplete = (_browser: any, result: { coverage: CoverageCollection | CoverageCollectionPerTest }) => {\n    this.emit('coverage_report', result.coverage);\n  };\n\n  public readonly onBrowsersReady = () => {\n    this.emit('browsers_ready');\n  };\n\n  public readonly onBrowserError = (_browser: any, error: any) => {\n    // Karma 2.0 has different error messages\n    if (error.message) {\n      this.emit('browser_error', error.message);\n    } else {\n      this.emit('browser_error', error.toString());\n    }\n  };\n\n  public readonly onCompileError = (errors: string[]) => {\n    // This is called from angular cli logic\n    // https://github.com/angular/angular-cli/blob/012672161087a05ae5ecffbed5d1ee307ce1e0ad/packages/angular_devkit/build_angular/src/angular-cli-files/plugins/karma.ts#L96\n    this.emit('compile_error', errors);\n  };\n\n  private collectRunState(runResult: karma.TestResults): RunStatus {\n    if (runResult.disconnected) {\n      return RunStatus.Timeout;\n    } else if (runResult.error) {\n      return RunStatus.Error;\n    } else {\n      return RunStatus.Complete;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/TestHooksMiddleware.ts":{"language":"typescript","mutants":[{"id":"112","location":{"end":{"column":76,"line":6},"start":{"column":53,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"113","location":{"end":{"column":4,"line":12},"start":{"column":25,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"114","location":{"end":{"column":4,"line":20},"start":{"column":53,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"115","location":{"end":{"column":24,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"116","location":{"end":{"column":24,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"117","location":{"end":{"column":24,"line":16},"start":{"column":9,"line":16}},"mutatorName":"BooleanLiteral","replacement":"this._instance","status":"Killed"},{"id":"118","location":{"end":{"column":6,"line":18},"start":{"column":26,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"119","location":{"end":{"column":39,"line":22},"start":{"column":37,"line":22}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"120","location":{"end":{"column":4,"line":35},"start":{"column":65,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"121","location":{"end":{"column":109,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"122","location":{"end":{"column":109,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"123","location":{"end":{"column":20,"line":26},"start":{"column":18,"line":26}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"124","location":{"end":{"column":70,"line":26},"start":{"column":65,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"125","location":{"end":{"column":6,"line":32},"start":{"column":111,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"126","location":{"end":{"column":8,"line":30},"start":{"column":31,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"127","location":{"end":{"column":24,"line":28},"start":{"column":9,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"128","location":{"end":{"column":36,"line":28},"start":{"column":26,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"129","location":{"end":{"column":23,"line":29},"start":{"column":9,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"130","location":{"end":{"column":49,"line":29},"start":{"column":25,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"131","location":{"end":{"column":6,"line":34},"start":{"column":12,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import * as path from 'path';\nimport * as url from 'url';\n\nimport { RequestHandler } from 'express';\n\nexport const TEST_HOOKS_FILE_NAME = require.resolve('./testHooksForStryker');\n\nexport default class TestHooksMiddleware {\n  private constructor() {\n    // This `.bind` call is important! The `handler` will be executed with `.apply` (or friends) and otherwise the `this` won't point to this instance!\n    this.handler = this.handler.bind(this);\n  }\n\n  private static _instance: TestHooksMiddleware;\n  public static get instance(): TestHooksMiddleware {\n    if (!this._instance) {\n      this._instance = new TestHooksMiddleware();\n    }\n    return this._instance;\n  }\n\n  public currentTestHooks: string = '';\n\n  public handler: RequestHandler = (request, response, next) => {\n    const pathName = url.parse(request.url).pathname;\n    if (pathName && path.normalize(pathName).endsWith(path.join('src', path.basename(TEST_HOOKS_FILE_NAME)))) {\n      response.writeHead(200, {\n        'Cache-Control': 'no-cache',\n        'Content-Type': 'application/javascript'\n      });\n      response.end(this.currentTestHooks);\n    } else {\n      next();\n    }\n  };\n}\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/index.ts":{"language":"typescript","mutants":[{"id":"132","location":{"end":{"column":100,"line":5},"start":{"column":31,"line":5}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"133","location":{"end":{"column":81,"line":5},"start":{"column":74,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { declareClassPlugin, PluginKind } from '@stryker-mutator/api/plugin';\n\nimport KarmaTestRunner from './KarmaTestRunner';\n\nexport const strykerPlugins = [declareClassPlugin(PluginKind.TestRunner, 'karma', KarmaTestRunner)];\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/starters/ProjectStarter.ts":{"language":"typescript","mutants":[{"id":"134","location":{"end":{"column":4,"line":16},"start":{"column":18,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"135","location":{"end":{"column":49,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"136","location":{"end":{"column":49,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"137","location":{"end":{"column":35,"line":11},"start":{"column":32,"line":11}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"138","location":{"end":{"column":49,"line":11},"start":{"column":36,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"139","location":{"end":{"column":6,"line":13},"start":{"column":51,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"140","location":{"end":{"column":6,"line":15},"start":{"column":12,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { LoggerFactoryMethod } from '@stryker-mutator/api/logging';\n\nimport StrykerKarmaSetup from '../StrykerKarmaSetup';\n\nimport * as angularStarter from './angularStarter';\nimport * as karmaStarter from './karmaStarter';\n\nexport default class ProjectStarter {\n  constructor(private readonly getLogger: LoggerFactoryMethod, private readonly setup: StrykerKarmaSetup) {}\n  public start() {\n    if (this.setup.projectType === 'angular-cli') {\n      return angularStarter.start(this.getLogger, this.setup.ngConfig);\n    } else {\n      return karmaStarter.start();\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/starters/angularStarter.ts":{"language":"typescript","mutants":[{"id":"141","location":{"end":{"column":40,"line":10},"start":{"column":33,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"142","location":{"end":{"column":2,"line":47},"start":{"column":104,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"143","location":{"end":{"column":41,"line":17},"start":{"column":27,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"144","location":{"end":{"column":23,"line":18},"start":{"column":7,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"145","location":{"end":{"column":23,"line":18},"start":{"column":7,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"146","location":{"end":{"column":16,"line":18},"start":{"column":7,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"147","location":{"end":{"column":4,"line":20},"start":{"column":25,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"148","location":{"end":{"column":108,"line":21},"start":{"column":19,"line":21}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"149","location":{"end":{"column":26,"line":21},"start":{"column":20,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"150","location":{"end":{"column":46,"line":21},"start":{"column":28,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"151","location":{"end":{"column":107,"line":21},"start":{"column":48,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"152","location":{"end":{"column":104,"line":21},"start":{"column":82,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"153","location":{"end":{"column":41,"line":22},"start":{"column":7,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"154","location":{"end":{"column":41,"line":22},"start":{"column":7,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"155","location":{"end":{"column":18,"line":22},"start":{"column":16,"line":22}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"156","location":{"end":{"column":4,"line":33},"start":{"column":43,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"157","location":{"end":{"column":6,"line":32},"start":{"column":36,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"158","location":{"end":{"column":49,"line":28},"start":{"column":46,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"159","location":{"end":{"column":66,"line":29},"start":{"column":11,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"160","location":{"end":{"column":66,"line":29},"start":{"column":11,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"161","location":{"end":{"column":32,"line":29},"start":{"column":30,"line":29}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"162","location":{"end":{"column":25,"line":29},"start":{"column":22,"line":29}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"163","location":{"end":{"column":21,"line":29},"start":{"column":11,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"164","location":{"end":{"column":51,"line":29},"start":{"column":48,"line":29}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"165","location":{"end":{"column":47,"line":29},"start":{"column":33,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"166","location":{"end":{"column":8,"line":31},"start":{"column":68,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"167","location":{"end":{"column":65,"line":30},"start":{"column":22,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"168","location":{"end":{"column":50,"line":34},"start":{"column":25,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"169","location":{"end":{"column":47,"line":34},"start":{"column":44,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"170","location":{"end":{"column":58,"line":35},"start":{"column":16,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"171","location":{"end":{"column":4,"line":40},"start":{"column":14,"line":36}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"172","location":{"end":{"column":4,"line":46},"start":{"column":33,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"173","location":{"end":{"column":21,"line":41},"start":{"column":9,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"174","location":{"end":{"column":21,"line":41},"start":{"column":9,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"175","location":{"end":{"column":19,"line":41},"start":{"column":18,"line":41}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"176","location":{"end":{"column":19,"line":41},"start":{"column":18,"line":41}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"177","location":{"end":{"column":6,"line":45},"start":{"column":23,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"178","location":{"end":{"column":174,"line":43},"start":{"column":9,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"179","location":{"end":{"column":2,"line":54},"start":{"column":36,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"180","location":{"end":{"column":69,"line":50},"start":{"column":47,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"181","location":{"end":{"column":62,"line":51},"start":{"column":7,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"182","location":{"end":{"column":62,"line":51},"start":{"column":7,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"183","location":{"end":{"column":18,"line":51},"start":{"column":16,"line":51}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"184","location":{"end":{"column":15,"line":51},"start":{"column":7,"line":51}},"mutatorName":"BooleanLiteral","replacement":"version","status":"CompileError"},{"id":"185","location":{"end":{"column":4,"line":53},"start":{"column":64,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"186","location":{"end":{"column":131,"line":52},"start":{"column":21,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"187","location":{"end":{"column":2,"line":60},"start":{"column":59,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"188","location":{"end":{"column":85,"line":56},"start":{"column":52,"line":56}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"189","location":{"end":{"column":84,"line":56},"start":{"column":81,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"190","location":{"end":{"column":35,"line":57},"start":{"column":7,"line":57}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"191","location":{"end":{"column":35,"line":57},"start":{"column":7,"line":57}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"192","location":{"end":{"column":33,"line":57},"start":{"column":32,"line":57}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"193","location":{"end":{"column":33,"line":57},"start":{"column":32,"line":57}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"194","location":{"end":{"column":4,"line":59},"start":{"column":37,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"195","location":{"end":{"column":148,"line":58},"start":{"column":21,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as path from 'path';\n\nimport { Logger, LoggerFactoryMethod } from '@stryker-mutator/api/logging';\nimport decamelize from 'decamelize';\nimport * as semver from 'semver';\n\nimport { NgConfigOptions, NgTestArguments } from '../StrykerKarmaSetup';\nimport { requireModule } from '../utils.js';\n\nconst MIN_ANGULAR_CLI_VERSION = '6.1.0';\n\nexport async function start(getLogger: LoggerFactoryMethod, ngConfig?: NgConfigOptions): Promise<void> {\n  const logger: Logger = getLogger(path.basename(__filename));\n  verifyAngularCliVersion();\n\n  // Make sure require angular cli from inside this function, that way it won't break if angular isn't installed and this file is required.\n  let cli = requireModule('@angular/cli');\n  if ('default' in cli) {\n    cli = cli.default;\n  }\n  const cliArgs = ['test', '--progress=false', `--karma-config=${require.resolve('./stryker-karma.conf')}`];\n  if (ngConfig && ngConfig.testArguments) {\n    const testArguments: NgTestArguments = ngConfig.testArguments;\n\n    const ngTestArguments = Object.keys(testArguments);\n    verifyNgTestArguments(ngTestArguments);\n    ngTestArguments.forEach(key => {\n      const decamelizedKey = decamelize(key, '-');\n      if ('progress' !== key && 'karma-config' !== decamelizedKey) {\n        cliArgs.push(`--${decamelizedKey}=${testArguments[key]}`);\n      }\n    });\n  }\n  const actualCommand = `ng ${cliArgs.join(' ')}`;\n  logger.debug(`Starting Angular tests: ${actualCommand}`);\n  return cli({\n    cliArgs,\n    inputStream: process.stdin,\n    outputStream: process.stdout\n  }).then((exitCode: number) => {\n    if (exitCode > 0) {\n      throw new Error(\n        `\\`ng test\\` command failed with exit code ${exitCode}. Please run with logLevel 'trace' to see the angular-cli console output (actual command was ${actualCommand})`\n      );\n    }\n  });\n}\n\nfunction verifyAngularCliVersion() {\n  const version = semver.coerce(requireModule('@angular/cli/package').version);\n  if (!version || semver.lt(version, MIN_ANGULAR_CLI_VERSION)) {\n    throw new Error(`Your @angular/cli version (${version}) is not supported. Please install ${MIN_ANGULAR_CLI_VERSION} or higher`);\n  }\n}\nfunction verifyNgTestArguments(ngTestArguments: string[]) {\n  const prefixedArguments = ngTestArguments.filter(key => key.trim().startsWith('-'));\n  if (prefixedArguments.length > 0) {\n    throw new Error(`Don't prefix arguments with dashes ('-'). Stryker will do this automatically. Problematic arguments are ${prefixedArguments}.`);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/starters/karmaStarter.ts":{"language":"typescript","mutants":[{"id":"196","location":{"end":{"column":2,"line":9},"start":{"column":46,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"197","location":{"end":{"column":38,"line":5},"start":{"column":31,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"198","location":{"end":{"column":4,"line":8},"start":{"column":26,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"199","location":{"end":{"column":55,"line":7},"start":{"column":33,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { requireModule } from '../utils.js';\n\nexport async function start(): Promise<void> {\n  // Make sure require karma from inside this function, that way it won't break if karma isn't installed and this file is required.\n  const karma = requireModule('karma');\n  await new karma.Server({\n    configFile: require.resolve('./stryker-karma.conf')\n  }).start();\n}\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/starters/stryker-karma.conf.ts":{"language":"typescript","mutants":[{"id":"200","location":{"end":{"column":2,"line":15},"start":{"column":44,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"201","location":{"end":{"column":4,"line":14},"start":{"column":14,"line":11}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"202","location":{"end":{"column":28,"line":12},"start":{"column":15,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"203","location":{"end":{"column":27,"line":12},"start":{"column":16,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"204","location":{"end":{"column":28,"line":13},"start":{"column":17,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"205","location":{"end":{"column":27,"line":13},"start":{"column":18,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"206","location":{"end":{"column":2,"line":35},"start":{"column":62,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"207","location":{"end":{"column":91,"line":18},"start":{"column":7,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"208","location":{"end":{"column":91,"line":18},"start":{"column":7,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"209","location":{"end":{"column":40,"line":18},"start":{"column":38,"line":18}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"210","location":{"end":{"column":82,"line":18},"start":{"column":79,"line":18}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"211","location":{"end":{"column":91,"line":18},"start":{"column":83,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"212","location":{"end":{"column":4,"line":34},"start":{"column":93,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"213","location":{"end":{"column":43,"line":20},"start":{"column":15,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"214","location":{"end":{"column":6,"line":25},"start":{"column":9,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"215","location":{"end":{"column":6,"line":33},"start":{"column":21,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"216","location":{"end":{"column":44,"line":26},"start":{"column":11,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"217","location":{"end":{"column":44,"line":26},"start":{"column":11,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"218","location":{"end":{"column":25,"line":26},"start":{"column":22,"line":26}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"219","location":{"end":{"column":44,"line":26},"start":{"column":26,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"220","location":{"end":{"column":8,"line":30},"start":{"column":46,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"221","location":{"end":{"column":228,"line":28},"start":{"column":11,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"222","location":{"end":{"column":8,"line":32},"start":{"column":14,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"223","location":{"end":{"column":95,"line":31},"start":{"column":19,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"224","location":{"end":{"column":2,"line":52},"start":{"column":46,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"225","location":{"end":{"column":4,"line":51},"start":{"column":14,"line":42}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"226","location":{"end":{"column":21,"line":44},"start":{"column":16,"line":44}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"227","location":{"end":{"column":20,"line":48},"start":{"column":15,"line":48}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"228","location":{"end":{"column":21,"line":50},"start":{"column":16,"line":50}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"229","location":{"end":{"column":2,"line":58},"start":{"column":45,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"230","location":{"end":{"column":33,"line":55},"start":{"column":7,"line":55}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"231","location":{"end":{"column":33,"line":55},"start":{"column":7,"line":55}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"232","location":{"end":{"column":4,"line":57},"start":{"column":35,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"233","location":{"end":{"column":2,"line":69},"start":{"column":38,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"234","location":{"end":{"column":23,"line":61},"start":{"column":7,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"235","location":{"end":{"column":23,"line":61},"start":{"column":7,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"236","location":{"end":{"column":23,"line":61},"start":{"column":7,"line":61}},"mutatorName":"BooleanLiteral","replacement":"config.basePath","status":"Killed"},{"id":"237","location":{"end":{"column":4,"line":68},"start":{"column":25,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"238","location":{"end":{"column":39,"line":63},"start":{"column":9,"line":63}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"239","location":{"end":{"column":39,"line":63},"start":{"column":9,"line":63}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"240","location":{"end":{"column":6,"line":65},"start":{"column":41,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"241","location":{"end":{"column":6,"line":67},"start":{"column":12,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"242","location":{"end":{"column":2,"line":74},"start":{"column":66,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"243","location":{"end":{"column":59,"line":72},"start":{"column":25,"line":72}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"244","location":{"end":{"column":59,"line":72},"start":{"column":25,"line":72}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"245","location":{"end":{"column":47,"line":72},"start":{"column":45,"line":72}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"246","location":{"end":{"column":59,"line":72},"start":{"column":48,"line":72}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"247","location":{"end":{"column":58,"line":72},"start":{"column":49,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"248","location":{"end":{"column":2,"line":89},"start":{"column":55,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"249","location":{"end":{"column":36,"line":83},"start":{"column":18,"line":83}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"250","location":{"end":{"column":36,"line":83},"start":{"column":18,"line":83}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"251","location":{"end":{"column":33,"line":83},"start":{"column":31,"line":83}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"252","location":{"end":{"column":36,"line":83},"start":{"column":34,"line":83}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"253","location":{"end":{"column":119,"line":85},"start":{"column":24,"line":85}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"254","location":{"end":{"column":71,"line":85},"start":{"column":67,"line":85}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"255","location":{"end":{"column":87,"line":85},"start":{"column":82,"line":85}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"256","location":{"end":{"column":102,"line":85},"start":{"column":97,"line":85}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"257","location":{"end":{"column":117,"line":85},"start":{"column":113,"line":85}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"258","location":{"end":{"column":95,"line":86},"start":{"column":32,"line":86}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"259","location":{"end":{"column":95,"line":86},"start":{"column":32,"line":86}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"260","location":{"end":{"column":61,"line":86},"start":{"column":59,"line":86}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"261","location":{"end":{"column":94,"line":86},"start":{"column":92,"line":86}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"262","location":{"end":{"column":116,"line":88},"start":{"column":21,"line":88}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"263","location":{"end":{"column":64,"line":88},"start":{"column":24,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"264","location":{"end":{"column":114,"line":88},"start":{"column":67,"line":88}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"265","location":{"end":{"column":75,"line":88},"start":{"column":68,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"266","location":{"end":{"column":2,"line":97},"start":{"column":51,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"267","location":{"end":{"column":98,"line":92},"start":{"column":21,"line":92}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"268","location":{"end":{"column":58,"line":92},"start":{"column":24,"line":92}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"269","location":{"end":{"column":96,"line":92},"start":{"column":61,"line":92}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"270","location":{"end":{"column":69,"line":92},"start":{"column":62,"line":92}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"271","location":{"end":{"column":24,"line":93},"start":{"column":7,"line":93}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"272","location":{"end":{"column":24,"line":93},"start":{"column":7,"line":93}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"273","location":{"end":{"column":24,"line":93},"start":{"column":7,"line":93}},"mutatorName":"BooleanLiteral","replacement":"config.reporters","status":"CompileError"},{"id":"274","location":{"end":{"column":4,"line":95},"start":{"column":26,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"275","location":{"end":{"column":26,"line":94},"start":{"column":24,"line":94}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"276","location":{"end":{"column":2,"line":136},"start":{"column":20,"line":99}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"277","location":{"end":{"column":4,"line":102},"start":{"column":20,"line":100}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"278","location":{"end":{"column":17,"line":101},"start":{"column":12,"line":101}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"279","location":{"end":{"column":4,"line":105},"start":{"column":20,"line":103}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"280","location":{"end":{"column":17,"line":104},"start":{"column":12,"line":104}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"281","location":{"end":{"column":4,"line":108},"start":{"column":19,"line":106}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"282","location":{"end":{"column":17,"line":107},"start":{"column":12,"line":107}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"283","location":{"end":{"column":4,"line":111},"start":{"column":19,"line":109}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"284","location":{"end":{"column":17,"line":110},"start":{"column":12,"line":110}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"285","location":{"end":{"column":4,"line":114},"start":{"column":20,"line":112}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"286","location":{"end":{"column":17,"line":113},"start":{"column":12,"line":113}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"287","location":{"end":{"column":4,"line":117},"start":{"column":20,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"288","location":{"end":{"column":17,"line":116},"start":{"column":12,"line":116}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"289","location":{"end":{"column":2,"line":146},"start":{"column":5,"line":142}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"290","location":{"end":{"column":4,"line":145},"start":{"column":15,"line":143}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"291","location":{"end":{"column":4,"line":158},"start":{"column":23,"line":149}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"292","location":{"end":{"column":4,"line":170},"start":{"column":3,"line":159}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"293","location":{"end":{"column":6,"line":169},"start":{"column":117,"line":165}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"294","location":{"end":{"column":73,"line":168},"start":{"column":34,"line":168}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"295","location":{"end":{"column":73,"line":168},"start":{"column":34,"line":168}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"296","location":{"end":{"column":54,"line":168},"start":{"column":52,"line":168}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"297","location":{"end":{"column":72,"line":168},"start":{"column":56,"line":168}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { Logger, LoggerFactoryMethod } from '@stryker-mutator/api/logging';\nimport { Config, ConfigOptions } from 'karma';\n\nimport StrykerReporter from '../StrykerReporter';\nimport TestHooksMiddleware, { TEST_HOOKS_FILE_NAME } from '../TestHooksMiddleware';\nimport { requireModule } from '../utils.js';\n\nfunction setDefaultOptions(config: Config) {\n  config.set({\n    browsers: ['PhantomJS'],\n    frameworks: ['jasmine']\n  });\n}\n\nfunction setUserKarmaConfigFile(config: Config, log: Logger) {\n  if (globalSettings.karmaConfigFile && typeof globalSettings.karmaConfigFile === 'string') {\n    const configFileName = path.resolve(globalSettings.karmaConfigFile);\n    log.debug('Importing config from \"%s\"', configFileName);\n    try {\n      const userConfig = requireModule(configFileName);\n      userConfig(config);\n      config.configFile = configFileName; // override config to ensure karma is as user-like as possible\n    } catch (error) {\n      if (error.code === 'MODULE_NOT_FOUND') {\n        log.error(\n          `Unable to find karma config at \"${globalSettings.karmaConfigFile}\" (tried to load from ${configFileName}). Please check your stryker config. You might need to make sure the file is included in the sandbox directory.`\n        );\n      } else {\n        log.error(`Could not read karma configuration from ${globalSettings.karmaConfigFile}.`, error);\n      }\n    }\n  }\n}\n\n/**\n * Sets configuration that is needed to control the karma life cycle. Namely it shouldn't watch files and not quit after first test run.\n * @param config The config to use\n */\nfunction setLifeCycleOptions(config: Config) {\n  config.set({\n    // No auto watch, stryker will inform us when we need to test\n    autoWatch: false,\n    // Override browserNoActivityTimeout. Default value 10000 might not enough to send perTest coverage results\n    browserNoActivityTimeout: 1000000,\n    // Never detach, always run in this same process (is already a separate process)\n    detached: false,\n    // Don't stop after first run\n    singleRun: false\n  });\n}\n\nfunction setUserKarmaConfig(config: Config) {\n  if (globalSettings.karmaConfig) {\n    config.set(globalSettings.karmaConfig);\n  }\n}\n\nfunction setBasePath(config: Config) {\n  if (!config.basePath) {\n    // We need to set the base path, so karma won't use this file to base everything of\n    if (globalSettings.karmaConfigFile) {\n      config.basePath = path.resolve(path.dirname(globalSettings.karmaConfigFile));\n    } else {\n      config.basePath = process.cwd();\n    }\n  }\n}\n\nfunction addPlugin(karmaConfig: ConfigOptions, karmaPlugin: any) {\n  karmaConfig.plugins = karmaConfig.plugins || ['karma-*'];\n  karmaConfig.plugins.push(karmaPlugin);\n}\n\n/**\n * Configures the test hooks middleware.\n * It adds a non-existing file to the top `files` array.\n * Further more it configures a middleware that serves the file.\n */\nfunction configureTestHooksMiddleware(config: Config) {\n  // Add test run middleware file\n  config.files = config.files || [];\n\n  config.files.unshift({ pattern: TEST_HOOKS_FILE_NAME, included: true, watched: false, served: false, nocache: true }); // Add a custom hooks file to provide hooks\n  const middleware: string[] = (config as any).middleware || ((config as any).middleware = []);\n  middleware.unshift(TestHooksMiddleware.name);\n  addPlugin(config, { [`middleware:${TestHooksMiddleware.name}`]: ['value', TestHooksMiddleware.instance.handler] });\n}\n\nfunction configureStrykerReporter(config: Config) {\n  addPlugin(config, { [`reporter:${StrykerReporter.name}`]: ['value', StrykerReporter.instance] });\n  if (!config.reporters) {\n    config.reporters = [];\n  }\n  config.reporters.push(StrykerReporter.name);\n}\n\nconst noopLogger = {\n  isTraceEnabled() {\n    return false;\n  },\n  isDebugEnabled() {\n    return false;\n  },\n  isInfoEnabled() {\n    return false;\n  },\n  isWarnEnabled() {\n    return false;\n  },\n  isErrorEnabled() {\n    return false;\n  },\n  isFatalEnabled() {\n    return false;\n  },\n  trace() {\n    // noop\n  },\n  debug() {\n    // noop\n  },\n  info() {\n    // noop\n  },\n  warn() {\n    // noop\n  },\n  error() {\n    // noop\n  },\n  fatal() {\n    // noop\n  }\n};\n\nconst globalSettings: {\n  karmaConfig?: ConfigOptions;\n  karmaConfigFile?: string;\n  getLogger: LoggerFactoryMethod;\n} = {\n  getLogger() {\n    return noopLogger;\n  }\n};\n\nexport = Object.assign(\n  (config: Config) => {\n    const log = globalSettings.getLogger(path.basename(__filename));\n    setDefaultOptions(config);\n    setUserKarmaConfigFile(config, log);\n    setUserKarmaConfig(config);\n    setBasePath(config);\n    setLifeCycleOptions(config);\n    configureTestHooksMiddleware(config);\n    configureStrykerReporter(config);\n  },\n  {\n    /**\n     * Provide global settings for next configuration\n     * This is the only way we can pass through any values between the `KarmaTestRunner` and the stryker-karma.conf file.\n     * (not counting environment variables)\n     */\n    setGlobals(globals: { karmaConfig?: ConfigOptions; karmaConfigFile?: string; getLogger?: LoggerFactoryMethod }) {\n      globalSettings.karmaConfig = globals.karmaConfig;\n      globalSettings.karmaConfigFile = globals.karmaConfigFile;\n      globalSettings.getLogger = globals.getLogger || (() => noopLogger);\n    }\n  }\n);\n"},"/home/runner/work/stryker/stryker/packages/karma-runner/src/utils.ts":{"language":"typescript","mutants":[{"id":"298","location":{"end":{"column":2,"line":3},"start":{"column":50,"line":1}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"export function requireModule(name: string): any {\n  return require(name);\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}